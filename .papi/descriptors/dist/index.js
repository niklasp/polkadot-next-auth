"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// .papi/descriptors/src/descriptors.ts
var descriptors_exports = {};
__export(descriptors_exports, {
  Dot: () => Dot,
  Pas: () => Pas
});
var minified, commonTrees, tokens, replaceTokens, tokenizedCommonTrees, unwrap, getChainDescriptors, Dot, Pas;
var init_descriptors = __esm({
  ".papi/descriptors/src/descriptors.ts"() {
    "use strict";
    [minified, commonTrees, tokens] = JSON.parse(`[{"dot":{"349":{"18":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":8,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12},"23":0,"27":1,"45":2,"48":3,"50":4,"57":5,"60":6,"62":7,"106":8,"109":9,"112":10,"118":11,"125":12,"127":13,"134":14,"137":15,"143":16,"144":17,"146":18,"147":19,"149":20,"152":17,"155":21,"157":22,"159":23,"164":24,"177":25,"181":26,"203":27,"208":28,"213":29,"214":17,"218":30,"223":31,"225":32,"228":33,"233":34,"255":35,"258":36,"262":37,"275":38,"281":39,"286":40,"288":41,"294":42,"297":43,"300":44,"302":45,"307":46,"312":47,"313":17,"317":48,"332":49,"336":50,"338":51,"341":52,"345":53,"348":54},"654":{"18":55,"23":{"361":35,"362":36,"363":37,"364":38,"365":39,"366":40,"367":41,"368":42,"369":43,"370":38},"27":56,"45":57,"48":58,"50":59,"57":60,"60":17,"62":17,"106":61,"109":17,"112":17,"118":62,"125":63,"127":17,"134":64,"137":65,"143":66,"144":17,"146":{"447":211,"448":211,"449":212,"450":213},"147":67,"149":68,"152":{"461":235,"462":236,"463":235,"464":237,"465":235,"466":238},"155":{"467":244,"468":245,"469":245,"470":128,"471":246,"472":247,"473":248,"474":248,"475":249,"476":250},"157":{"477":255,"478":256,"479":257,"480":258},"159":69,"164":70,"177":71,"181":72,"203":73,"208":74,"213":17,"214":17,"218":75,"223":17,"225":17,"228":76,"233":17,"255":77,"258":78,"262":17,"275":79,"281":17,"286":80,"288":81,"294":82,"297":17,"300":83,"302":84,"307":85,"312":86,"313":87,"317":88,"332":89,"336":90,"338":91,"341":92,"345":17,"348":17},"889":{"18":{"655":24,"656":25,"657":26,"658":27,"659":27,"660":28,"661":29},"23":{"662":44,"663":44,"664":45,"665":46,"666":47,"667":47,"668":47,"669":47,"670":47},"27":93,"45":17,"48":17,"50":94,"57":95,"60":96,"62":17,"106":97,"109":98,"112":17,"118":99,"125":100,"127":17,"134":101,"137":102,"143":103,"144":17,"146":{"750":214,"751":214,"752":215},"147":104,"149":105,"152":{"756":239,"757":26,"758":26,"759":26,"760":240,"761":241},"155":{"762":241,"763":251,"764":252,"765":253,"766":253},"157":{"767":259,"768":260,"769":261,"770":262},"159":106,"164":107,"177":108,"181":109,"203":110,"208":{"686":150,"804":356,"805":357,"806":155,"807":26},"213":111,"214":17,"218":17,"223":17,"225":112,"228":17,"233":17,"255":113,"258":17,"262":17,"275":114,"281":17,"286":115,"288":17,"294":116,"297":17,"300":117,"302":118,"307":119,"312":{"789":449,"844":473,"845":473,"846":449,"847":449,"848":449,"849":474,"850":449,"851":475,"852":449},"313":120,"317":121,"332":122,"336":123,"338":124,"341":17,"345":17,"348":17},"987":{"18":125,"23":126,"27":17,"45":127,"48":128,"50":129,"57":130,"60":131,"62":17,"106":132,"109":17,"112":17,"118":17,"125":133,"127":17,"134":134,"137":135,"143":136,"144":17,"146":17,"147":137,"149":138,"152":139,"155":140,"157":141,"159":142,"164":143,"177":144,"181":145,"203":146,"208":129,"213":147,"214":17,"218":17,"223":17,"225":17,"228":17,"233":17,"255":148,"258":17,"262":17,"275":17,"281":17,"286":17,"288":17,"294":149,"297":17,"300":150,"302":151,"307":152,"312":153,"313":154,"317":155,"332":17,"336":156,"338":17,"341":133,"345":17,"348":17},"1106":{"197":157,"989":158,"993":159,"1001":{"997":559,"998":560,"999":561,"1000":562},"1011":160,"1014":161,"1016":162,"1018":163,"1050":164,"1058":165,"1064":166,"1067":167,"1071":168,"1076":169,"1078":170,"1081":171,"1083":172,"1088":173,"1091":{"1086":628,"1087":629,"1089":630,"1090":631},"1096":174,"1099":{"1097":636,"1098":637},"1101":175,"1105":176}},"pas":{"349":{"18":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":642,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12},"23":0,"27":1,"45":2,"48":3,"50":4,"57":5,"60":6,"62":7,"106":8,"109":9,"112":10,"118":11,"125":12,"127":13,"134":14,"137":15,"143":16,"144":17,"146":18,"147":19,"149":20,"152":17,"155":21,"157":22,"159":23,"164":24,"177":25,"181":26,"203":27,"208":28,"213":29,"214":17,"218":30,"223":31,"225":32,"228":33,"233":34,"255":35,"258":36,"262":37,"275":38,"281":39,"286":40,"288":41,"294":42,"297":43,"300":44,"302":45,"307":46,"312":47,"313":17,"317":48,"332":49,"336":50,"338":51,"341":52,"345":53,"348":54,"1107":{"1107":651},"1108":17,"1109":{"Key":97}},"654":{"18":55,"23":{"361":644,"362":36,"363":645,"364":38,"365":646,"366":647,"367":41,"368":42,"369":43,"370":38},"27":56,"45":57,"48":58,"50":59,"57":60,"60":17,"62":17,"106":61,"109":17,"112":17,"118":62,"125":63,"127":17,"134":64,"137":65,"143":66,"144":17,"146":{"447":211,"448":211,"449":212,"450":649},"147":67,"149":68,"152":{"461":654,"462":655,"463":654,"464":656,"465":654,"466":657},"155":{"467":661,"468":245,"469":245,"470":128,"471":246,"472":247,"473":248,"474":248,"475":249,"476":662},"157":{"477":663,"478":664,"479":257,"480":258},"159":69,"164":70,"177":71,"181":72,"203":73,"208":74,"213":17,"214":17,"218":75,"223":17,"225":17,"228":76,"233":17,"255":77,"258":78,"262":17,"275":79,"281":17,"286":80,"288":81,"294":82,"297":17,"300":83,"302":84,"307":85,"312":86,"313":87,"317":88,"332":89,"336":90,"338":91,"341":92,"345":17,"348":17,"1107":{"set_parameter":652},"1108":{"sudo_schedule_para_initialize":668,"sudo_schedule_para_cleanup":446,"sudo_schedule_parathread_upgrade":446,"sudo_schedule_parachain_downgrade":446,"sudo_queue_downward_xcm":669,"sudo_establish_hrmp_channel":417},"1109":{"sudo":649,"sudo_unchecked_weight":657,"set_key":670,"sudo_as":671,"remove_key":128}},"889":{"18":{"655":24,"656":643,"657":26,"658":27,"659":27,"660":28,"661":29},"23":{"662":44,"663":44,"664":648,"665":46,"666":47,"667":47,"668":47,"669":47,"670":47},"27":93,"45":17,"48":17,"50":94,"57":95,"60":96,"62":17,"106":97,"109":98,"112":17,"118":99,"125":100,"127":17,"134":101,"137":102,"143":103,"144":17,"146":{"750":214,"751":214,"752":650},"147":104,"149":105,"152":{"756":658,"757":26,"758":26,"759":26,"760":659,"761":660},"155":{"762":660,"763":251,"764":252,"765":253,"766":253},"157":{"767":259,"768":260,"769":665,"770":262},"159":106,"164":107,"177":108,"181":109,"203":110,"208":{"686":150,"804":666,"805":357,"806":155,"807":26},"213":111,"214":17,"218":17,"223":17,"225":112,"228":17,"233":17,"255":113,"258":17,"262":17,"275":114,"281":17,"286":115,"288":17,"294":116,"297":17,"300":117,"302":118,"307":119,"312":{"789":449,"844":473,"845":473,"846":449,"847":449,"848":449,"849":667,"850":449,"851":475,"852":449},"313":120,"317":121,"332":122,"336":123,"338":124,"341":17,"345":17,"348":17,"1107":{"Updated":653},"1108":17,"1109":{"Sudid":672,"KeyChanged":673,"KeyRemoved":26,"SudoAsDone":672}},"987":{"18":125,"23":126,"27":17,"45":127,"48":128,"50":129,"57":130,"60":131,"62":17,"106":132,"109":17,"112":17,"118":17,"125":133,"127":17,"134":134,"137":135,"143":136,"144":17,"146":17,"147":137,"149":138,"152":139,"155":140,"157":141,"159":142,"164":143,"177":144,"181":145,"203":146,"208":129,"213":147,"214":17,"218":17,"223":17,"225":17,"228":17,"233":17,"255":148,"258":17,"262":17,"275":17,"281":17,"286":17,"288":17,"294":149,"297":17,"300":150,"302":151,"307":152,"312":153,"313":154,"317":155,"332":17,"336":156,"338":17,"341":133,"345":17,"348":17,"1107":17,"1108":17,"1109":17},"1106":{"197":157,"989":158,"993":159,"1001":{"997":674,"998":560,"999":561,"1000":562},"1011":160,"1014":161,"1016":162,"1018":163,"1050":164,"1058":165,"1064":166,"1067":167,"1071":168,"1076":169,"1078":170,"1081":171,"1083":172,"1088":173,"1091":{"1086":628,"1087":629,"1089":675,"1090":676},"1096":174,"1099":{"1097":677,"1098":678},"1101":175,"1105":176}}},[{"19":1,"20":31,"21":32,"22":33},{"24":48,"25":49,"26":50},{"28":55,"29":56,"30":55,"31":55,"32":6,"33":57,"34":6,"35":56,"36":1,"37":58,"38":59,"39":60,"40":61,"41":1,"42":62,"43":62,"44":63},{"46":55,"47":2},{"49":67},{"0":73,"51":55,"52":55,"53":74,"54":75,"55":76,"56":77},{"58":55,"59":95},{"61":97},{"63":1,"64":1,"65":98,"66":99,"67":55,"68":55,"69":55,"70":1,"71":100,"72":101,"73":102,"74":1,"75":1,"76":103,"77":1,"78":104,"79":1,"80":1,"81":1,"82":105,"83":106,"84":107,"85":108,"86":107,"87":109,"88":110,"89":111,"90":112,"91":113,"92":112,"93":114,"94":1,"95":1,"96":55,"97":115,"98":116,"99":117,"100":118,"101":119,"102":120,"103":1,"104":121,"105":1},{"107":158,"108":159},{"110":161,"111":61},{"73":98,"104":121,"113":1,"114":2,"115":162,"116":163,"117":164},{"29":56,"119":166,"120":167,"121":1,"122":61,"123":55,"124":168},{"116":172,"126":172},{"128":1,"129":173,"130":55,"131":121,"132":1,"133":174},{"135":188,"136":189},{"138":1,"139":199,"140":200,"141":106,"142":4},{},{"145":210},{"147":216,"148":55,"149":217,"150":218,"151":219},{"59":228,"149":227},{"153":242,"154":243},{"156":254},{"158":1,"159":263,"160":5,"161":121},{"162":1,"163":106,"164":275,"165":5,"166":112},{"167":1,"168":283,"169":284,"170":285,"171":1,"172":286,"173":1,"174":287,"175":288,"176":289},{"178":299,"179":1,"180":300},{"182":55,"183":55,"184":55,"185":1,"186":1,"187":1,"188":1,"189":308,"190":1,"191":309,"192":1,"193":310,"194":1,"195":311,"196":1,"197":5,"198":1,"199":1,"200":312,"201":1,"202":313},{"204":353,"205":354,"206":1,"207":1},{"209":358,"210":1,"211":359,"212":1},{"215":361,"216":362,"217":2},{"219":1,"220":121,"221":172,"222":370},{"224":371},{"226":375,"227":376},{"229":378,"230":379,"231":1,"232":380},{"234":381,"235":172,"236":121,"237":382,"238":5,"239":106,"240":4,"241":383,"242":384,"243":116,"244":106,"245":116,"246":4,"247":385,"248":386,"249":116,"250":116,"251":387,"252":388,"253":389,"254":390},{"256":375,"257":402},{"259":404,"260":4,"261":112},{"263":405,"264":406,"265":106,"266":106,"267":407,"268":406,"269":106,"270":408,"271":387,"272":387,"273":409,"274":410},{"276":172,"277":1,"278":423,"279":424,"280":425},{"226":428,"282":1,"283":426,"284":427,"285":429},{"97":432,"287":106},{"289":434,"290":435,"291":436,"292":437,"293":301},{"295":441,"296":442},{"255":443,"298":106,"299":1},{"301":452},{"303":1,"304":61,"305":456,"306":457},{"308":467,"309":121,"310":1,"311":1},{"314":482,"315":483,"316":484},{"318":55,"319":493,"320":389,"321":1,"322":494,"323":495,"324":496,"325":497,"326":498,"327":499,"328":500,"329":2,"330":2,"331":501},{"333":529,"334":530,"335":531},{"337":539},{"29":545,"35":545,"124":168,"339":55,"340":429},{"342":6,"343":55,"344":550},{"346":551,"347":551},{"350":17,"351":18,"352":19,"353":19,"354":20,"355":21,"356":22,"357":17,"358":23,"359":23,"360":19},{"371":51,"372":52,"373":52,"374":52,"375":53},{"376":64,"377":64,"378":65},{"379":66},{"380":68,"381":69,"382":68,"383":70,"384":68},{"383":79,"385":78,"386":78,"387":80,"388":81,"389":82,"390":83,"391":84,"392":85},{"393":122,"394":123,"395":124,"396":125,"397":126,"398":127,"399":128,"400":129,"401":128,"402":130,"403":131,"404":132,"405":128,"406":128,"407":133,"408":134,"409":128,"410":135,"411":136,"412":124,"413":134,"414":137,"415":138,"416":139,"417":140,"418":130,"419":141,"420":142,"421":143,"422":144,"423":139},{"424":165,"425":128},{"376":169,"377":169,"426":170},{"427":176,"428":177,"429":178,"430":68,"431":68,"432":68},{"433":190,"434":191,"435":192,"436":193,"437":194,"438":195},{"362":68,"439":202,"440":68,"441":68,"442":68,"443":68,"444":203,"445":68,"446":204},{"380":221,"451":222,"452":223,"453":224,"454":225},{"455":128,"456":229,"457":230,"458":231,"459":232,"460":233},{"481":265,"482":266,"483":267,"484":266,"485":266,"486":268,"487":266,"488":266,"489":269},{"483":277,"484":278,"485":278,"490":276,"491":279,"492":278,"493":278},{"439":293,"494":290,"495":291,"496":292,"497":294},{"498":302,"499":303,"500":304},{"394":315,"395":316,"396":318,"398":321,"399":326,"446":323,"501":314,"502":128,"503":317,"504":319,"505":320,"506":322,"507":324,"508":325,"509":327,"510":328,"511":329,"512":330,"513":331,"514":332,"515":326,"516":326,"517":333,"518":334,"519":334,"520":326},{"521":128,"522":128,"523":355},{"524":130,"525":130,"526":130,"527":130,"528":130,"529":130,"530":130,"531":130,"532":130,"533":130,"534":130,"535":363,"536":363,"537":130,"538":130,"539":130,"540":130,"541":130,"542":130,"543":130,"544":130,"545":130,"546":130,"547":130,"548":130,"549":130,"550":364,"551":364,"552":130,"553":130,"554":130,"555":130,"556":130,"557":130,"558":130,"559":130,"560":365,"561":366,"562":367,"563":364,"564":130,"565":130,"566":130,"567":130,"568":130,"569":368,"570":130,"571":369},{"572":377},{"573":391,"574":392,"575":393,"576":392,"577":394,"578":395,"579":396,"580":397,"581":398},{"582":403},{"583":411,"584":412,"585":413,"586":414,"587":415,"588":415,"589":416,"590":417,"591":418,"592":418,"593":419},{"594":128},{"595":433},{"596":438,"597":438},{"522":446,"598":444,"599":445,"600":447,"601":394,"602":128,"603":394,"604":391,"605":392},{"606":453,"607":394,"608":394},{"609":458,"610":459,"611":128},{"504":468,"612":469,"613":470,"614":68,"615":68,"616":468,"617":471,"618":68,"619":472},{"620":477,"621":478,"622":479},{"623":485,"624":486,"625":487,"626":488,"627":489,"628":490},{"629":502,"630":503,"631":503,"632":504,"633":505,"634":506,"635":507,"636":507,"637":508,"638":508,"639":509,"640":508,"641":510,"642":511},{"643":533,"644":534},{"504":540,"645":540,"646":541},{"647":546,"648":546,"649":547,"650":548,"651":548,"652":549,"653":549},{"671":54,"672":54,"673":54},{"674":71,"675":72,"676":71},{"285":90,"677":86,"678":87,"679":88,"680":89,"681":90,"682":90,"683":91,"684":90,"685":90,"686":90,"687":90,"688":90,"689":90,"690":90,"691":92,"692":93,"693":93,"694":90,"695":90,"696":90,"697":94},{"698":96},{"66":150,"93":156,"686":147,"699":145,"700":146,"701":148,"702":149,"703":26,"704":150,"705":150,"706":151,"707":26,"708":152,"709":153,"710":154,"711":155,"712":155,"713":157},{"714":160},{"715":149},{"716":171,"717":26,"718":26},{"684":183,"719":179,"720":180,"721":181,"722":182,"723":184,"724":185,"725":186,"726":72,"727":187,"728":187,"729":72},{"730":196,"731":197,"732":198,"733":198},{"734":205,"735":206,"736":206,"737":90,"738":207,"739":72,"740":72,"741":208,"742":72,"743":208,"744":208,"745":208,"746":208,"747":206,"748":209,"749":209},{"753":226},{"754":234,"755":27},{"771":72,"772":270,"773":72,"774":271,"775":272,"776":72,"777":72,"778":72,"779":273,"780":274,"781":273},{"663":280,"720":281,"753":282,"782":280},{"686":297,"700":297,"783":295,"784":296,"785":26,"786":298},{"787":305,"788":306},{"66":336,"704":338,"705":339,"789":335,"790":337,"791":340,"792":341,"793":342,"794":343,"795":344,"796":345,"797":346,"798":347,"799":348,"800":349,"801":350,"802":351,"803":351},{"686":360,"730":360,"808":360,"809":360},{"810":372,"811":372,"812":373,"813":374},{"814":399,"815":399,"816":399,"817":399,"818":400,"819":401,"820":401,"821":401},{"822":420,"823":421,"824":422,"825":421,"826":420,"827":420,"828":422},{"829":430,"830":431,"831":399},{"832":439,"833":440},{"681":450,"834":448,"835":449,"836":451},{"837":454,"838":455},{"681":462,"682":463,"839":460,"840":461,"841":464,"842":465,"843":466},{"853":480,"854":481},{"686":90,"855":491,"856":26,"857":492},{"858":512,"859":513,"860":514,"861":515,"862":516,"863":517,"864":516,"865":516,"866":518,"867":514,"868":519,"869":520,"870":521,"871":522,"872":523,"873":524,"874":514,"875":525,"876":526,"877":526,"878":526,"879":527,"880":520,"881":528},{"882":535,"883":536,"884":537,"885":538},{"886":542,"887":543,"888":544},{"890":13,"891":14,"892":1,"893":15,"894":16,"895":1},{"896":34,"897":1},{"898":55,"899":55,"900":1,"901":1},{"902":55},{"684":55},{"903":55,"904":1,"905":1,"906":1},{"907":1},{"908":1,"909":1,"910":1,"911":1,"912":1,"913":1},{"900":1,"901":1,"914":55},{"915":1,"916":1,"917":175,"918":1,"919":1},{"920":1,"921":1},{"922":55,"923":1,"924":1,"925":1,"926":201},{"927":220},{"928":55,"929":1},{"930":1},{"931":55,"932":55,"933":1,"934":1,"935":55,"936":55},{"937":55,"938":55,"939":1},{"940":55,"941":1,"942":1,"943":1,"944":264,"945":264,"946":55,"947":55,"948":1},{"949":1,"950":55},{"951":1,"952":1,"953":55,"954":1,"955":34,"956":1,"957":55,"958":55,"959":55,"960":1,"961":1,"962":34,"963":1,"964":1},{"965":301},{"917":175,"966":1,"967":1},{"95":1,"917":175},{"968":55},{"917":175,"969":55,"970":1},{"947":55,"971":55},{"972":1,"973":1},{"974":1,"975":1,"976":1,"977":1},{"917":175,"978":55,"979":1},{"980":1,"981":476},{"982":1},{"983":1,"984":1,"985":532,"986":532},{"994":556,"995":557,"996":558},{"988":552},{"990":553,"991":554,"992":555},{"1002":563,"1003":564,"1004":565,"1005":566,"1006":567,"1007":568,"1008":569,"1009":563,"1010":566},{"1002":572,"1012":570,"1013":571},{"1015":573},{"1017":574},{"1019":575,"1020":576,"1021":577,"1022":578,"1023":579,"1024":580,"1025":581,"1026":582,"1027":583,"1028":584,"1029":585,"1030":586,"1031":587,"1032":588,"1033":589,"1034":590,"1035":575,"1036":591,"1037":592,"1038":593,"1039":594,"1040":595,"1041":596,"1042":581,"1043":597,"1044":598,"1045":558,"1046":599,"1047":581,"1048":600,"1049":601},{"1051":602,"1052":603,"1053":604,"1054":605,"1055":606,"1056":607,"1057":608},{"1059":609,"1060":610,"1061":611,"1062":612,"1063":613},{"1065":614,"1066":614},{"1056":617,"1068":615,"1069":616,"1070":618},{"1056":621,"1069":622,"1072":619,"1073":618,"1074":620,"1075":620},{"1077":575},{"1079":623,"1080":624},{"1082":625},{"1084":626,"1085":627,"1086":628,"1087":629},{"1092":632,"1093":633,"1094":634,"1095":635},{"1100":638},{"1102":639,"1103":640,"1104":641}],["Account","ExtrinsicCount","InherentsApplied","BlockWeight","AllExtrinsicsLen","BlockHash","ExtrinsicData","Number","ParentHash","Digest","Events","EventCount","EventTopics","LastRuntimeUpgrade","UpgradedToU32RefCount","UpgradedToTripleRefCount","ExecutionPhase","AuthorizedUpgrade","System","IncompleteSince","Agenda","Retries","Lookup","Scheduler","StatusFor","RequestStatusFor","PreimageFor","Preimage","EpochIndex","Authorities","GenesisSlot","CurrentSlot","Randomness","PendingEpochConfigChange","NextRandomness","NextAuthorities","SegmentIndex","UnderConstruction","Initialized","AuthorVrfRandomness","EpochStart","Lateness","EpochConfig","NextEpochConfig","SkippedEpochs","Babe","Now","DidUpdate","Timestamp","Accounts","Indices","TotalIssuance","InactiveIssuance","Locks","Reserves","Holds","Freezes","Balances","NextFeeMultiplier","StorageVersion","TransactionPayment","Author","Authorship","ValidatorCount","MinimumValidatorCount","Invulnerables","Bonded","MinNominatorBond","MinValidatorBond","MinimumActiveStake","MinCommission","Ledger","Payee","Validators","CounterForValidators","MaxValidatorsCount","Nominators","CounterForNominators","VirtualStakers","CounterForVirtualStakers","MaxNominatorsCount","CurrentEra","ActiveEra","ErasStartSessionIndex","ErasStakers","ErasStakersOverview","ErasStakersClipped","ErasStakersPaged","ClaimedRewards","ErasValidatorPrefs","ErasValidatorReward","ErasRewardPoints","ErasTotalStake","ForceEra","MaxStakedRewards","SlashRewardFraction","CanceledSlashPayout","UnappliedSlashes","BondedEras","ValidatorSlashInEra","NominatorSlashInEra","SlashingSpans","SpanSlash","CurrentPlannedSession","DisabledValidators","ChillThreshold","Staking","Reports","ConcurrentReportsIndex","Offences","HistoricalSessions","StoredRange","Historical","CurrentIndex","QueuedChanged","QueuedKeys","NextKeys","KeyOwner","Session","State","PendingChange","NextForced","Stalled","CurrentSetId","SetIdSession","Grandpa","Keys","AuthorityDiscovery","ProposalCount","Proposals","Deactivated","Approvals","SpendCount","Spends","Treasury","VotingFor","ClassLocksFor","ConvictionVoting","ReferendumCount","ReferendumInfoFor","TrackQueue","DecidingCount","MetadataOf","Referenda","Origins","WhitelistedCall","Whitelist","Claims","Total","Vesting","Signing","Preclaims","Utility","Proxies","Announcements","Proxy","Multisigs","Multisig","BountyCount","Bounties","BountyDescriptions","BountyApprovals","ChildBountyCount","ParentChildBounties","ChildBounties","ChildBountyDescriptions","ChildrenCuratorFees","Round","CurrentPhase","QueuedSolution","Snapshot","DesiredTargets","SnapshotMetadata","SignedSubmissionNextIndex","SignedSubmissionIndices","SignedSubmissionsMap","MinimumUntrustedScore","ElectionProviderMultiPhase","ListNodes","CounterForListNodes","ListBags","VoterList","TotalValueLocked","MinJoinBond","MinCreateBond","MaxPools","MaxPoolMembers","MaxPoolMembersPerPool","GlobalMaxCommission","PoolMembers","CounterForPoolMembers","BondedPools","CounterForBondedPools","RewardPools","CounterForRewardPools","SubPoolsStorage","CounterForSubPoolsStorage","Metadata","CounterForMetadata","LastPoolId","ReversePoolIdLookup","CounterForReversePoolIdLookup","ClaimPermissions","NominationPools","Head","Queue","CounterForQueue","ErasToCheckPerBlock","FastUnstake","Delegators","CounterForDelegators","Agents","CounterForAgents","DelegatedStaking","ParachainsOrigin","ActiveConfig","PendingConfigs","BypassConsistencyCheck","Configuration","CurrentSessionIndex","ActiveValidatorIndices","ActiveValidatorKeys","AllowedRelayParents","ParasShared","V1","ParaInclusion","Included","OnChainVotes","ParaInherent","ValidatorGroups","AvailabilityCores","SessionStartBlock","ClaimQueue","ParaScheduler","PvfActiveVoteMap","PvfActiveVoteList","Parachains","ParaLifecycles","Heads","MostRecentContext","CurrentCodeHash","PastCodeHash","PastCodeMeta","PastCodePruning","FutureCodeUpgrades","FutureCodeUpgradesAt","FutureCodeHash","UpgradeGoAheadSignal","UpgradeRestrictionSignal","UpgradeCooldowns","UpcomingUpgrades","ActionsQueue","UpcomingParasGenesis","CodeByHashRefs","CodeByHash","Paras","HasInitialized","BufferedSessionChanges","Initializer","DownwardMessageQueues","DownwardMessageQueueHeads","DeliveryFeeFactor","Dmp","HrmpOpenChannelRequests","HrmpOpenChannelRequestsList","HrmpOpenChannelRequestCount","HrmpAcceptedChannelRequestCount","HrmpCloseChannelRequests","HrmpCloseChannelRequestsList","HrmpWatermarks","HrmpChannels","HrmpIngressChannelsIndex","HrmpEgressChannelsIndex","HrmpChannelContents","HrmpChannelDigests","Hrmp","AssignmentKeysUnsafe","EarliestStoredSession","Sessions","AccountKeys","SessionExecutorParams","ParaSessionInfo","LastPrunedSession","Disputes","BackersOnDisputes","Frozen","ParasDisputes","ValidatorSetCounts","ParasSlashing","ParaIdAffinity","QueueStatus","FreeEntries","AffinityEntries","Revenue","OnDemand","CoreSchedules","CoreDescriptors","CoretimeAssignmentProvider","PendingSwap","NextFreeParaId","Registrar","Leases","Slots","AuctionCounter","AuctionInfo","ReservedAmounts","Winning","Auctions","Funds","NewRaise","EndingsCount","NextFundIndex","Crowdloan","Coretime","MigrationProcess","AutoLimits","SignedMigrationMaxLimits","StateTrieMigration","QueryCounter","Queries","AssetTraps","SafeXcmVersion","SupportedVersion","VersionNotifiers","VersionNotifyTargets","VersionDiscoveryQueue","CurrentMigration","RemoteLockedFungibles","LockedFungibles","XcmExecutionSuspended","ShouldRecordXcm","RecordedXcm","XcmPallet","BookStateFor","ServiceHead","Pages","MessageQueue","ConversionRateToNative","AssetRate","ValidatorSetId","GenesisBlock","Beefy","RootHash","NumberOfLeaves","Nodes","Mmr","BeefyAuthorities","BeefyNextAuthorities","BeefyMmrLeaf","storage","remark","set_heap_pages","set_code","set_code_without_checks","set_storage","kill_storage","kill_prefix","remark_with_event","authorize_upgrade","authorize_upgrade_without_checks","apply_authorized_upgrade","schedule","cancel","schedule_named","cancel_named","schedule_after","schedule_named_after","set_retry","set_retry_named","cancel_retry","cancel_retry_named","note_preimage","unnote_preimage","request_preimage","unrequest_preimage","ensure_updated","report_equivocation","report_equivocation_unsigned","plan_config_change","set","claim","transfer","free","force_transfer","freeze","transfer_allow_death","transfer_keep_alive","transfer_all","force_unreserve","upgrade_accounts","force_set_balance","force_adjust_total_issuance","burn","bond","bond_extra","unbond","withdraw_unbonded","validate","nominate","chill","set_payee","set_controller","set_validator_count","increase_validator_count","scale_validator_count","force_no_eras","force_new_era","set_invulnerables","force_unstake","force_new_era_always","cancel_deferred_slash","payout_stakers","rebond","reap_stash","kick","set_staking_configs","chill_other","force_apply_min_commission","set_min_commission","payout_stakers_by_page","update_payee","deprecate_controller_batch","restore_ledger","withdraw_overstake","set_keys","purge_keys","note_stalled","spend_local","remove_approval","spend","payout","check_status","void_spend","vote","delegate","undelegate","unlock","remove_vote","remove_other_vote","submit","place_decision_deposit","refund_decision_deposit","kill","nudge_referendum","one_fewer_deciding","refund_submission_deposit","set_metadata","whitelist_call","remove_whitelisted_call","dispatch_whitelisted_call","dispatch_whitelisted_call_with_preimage","mint_claim","claim_attest","attest","move_claim","vest","vest_other","vested_transfer","force_vested_transfer","merge_schedules","force_remove_vesting_schedule","batch","as_derivative","batch_all","dispatch_as","force_batch","with_weight","proxy","add_proxy","remove_proxy","remove_proxies","create_pure","kill_pure","announce","remove_announcement","reject_announcement","proxy_announced","as_multi_threshold_1","as_multi","approve_as_multi","cancel_as_multi","propose_bounty","approve_bounty","propose_curator","unassign_curator","accept_curator","award_bounty","claim_bounty","close_bounty","extend_bounty_expiry","add_child_bounty","award_child_bounty","claim_child_bounty","close_child_bounty","submit_unsigned","set_minimum_untrusted_score","set_emergency_election_result","governance_fallback","rebag","put_in_front_of","put_in_front_of_other","join","claim_payout","pool_withdraw_unbonded","create","create_with_pool_id","set_state","set_configs","update_roles","bond_extra_other","set_claim_permission","claim_payout_other","set_commission","set_commission_max","set_commission_change_rate","claim_commission","adjust_pool_deposit","set_commission_claim_permission","apply_slash","migrate_delegation","migrate_pool_to_delegate_stake","register_fast_unstake","deregister","control","set_validation_upgrade_cooldown","set_validation_upgrade_delay","set_code_retention_period","set_max_code_size","set_max_pov_size","set_max_head_data_size","set_coretime_cores","set_max_availability_timeouts","set_group_rotation_frequency","set_paras_availability_period","set_scheduling_lookahead","set_max_validators_per_core","set_max_validators","set_dispute_period","set_dispute_post_conclusion_acceptance_period","set_no_show_slots","set_n_delay_tranches","set_zeroth_delay_tranche_width","set_needed_approvals","set_relay_vrf_modulo_samples","set_max_upward_queue_count","set_max_upward_queue_size","set_max_downward_message_size","set_max_upward_message_size","set_max_upward_message_num_per_candidate","set_hrmp_open_request_ttl","set_hrmp_sender_deposit","set_hrmp_recipient_deposit","set_hrmp_channel_max_capacity","set_hrmp_channel_max_total_size","set_hrmp_max_parachain_inbound_channels","set_hrmp_channel_max_message_size","set_hrmp_max_parachain_outbound_channels","set_hrmp_max_message_num_per_candidate","set_pvf_voting_ttl","set_minimum_validation_upgrade_delay","set_bypass_consistency_check","set_async_backing_params","set_executor_params","set_on_demand_base_fee","set_on_demand_fee_variability","set_on_demand_queue_max_size","set_on_demand_target_queue_utilization","set_on_demand_ttl","set_minimum_backing_votes","set_node_feature","set_approval_voting_params","set_scheduler_params","enter","force_set_current_code","force_set_current_head","force_schedule_code_upgrade","force_note_new_head","force_queue_action","add_trusted_validation_code","poke_unused_validation_code","include_pvf_check_statement","force_set_most_recent_context","force_approve","hrmp_init_open_channel","hrmp_accept_open_channel","hrmp_close_channel","force_clean_hrmp","force_process_hrmp_open","force_process_hrmp_close","hrmp_cancel_open_request","force_open_hrmp_channel","establish_system_channel","poke_channel_deposits","establish_channel_with_system","force_unfreeze","report_dispute_lost_unsigned","place_order_allow_death","place_order_keep_alive","register","force_register","swap","remove_lock","reserve","add_lock","schedule_code_upgrade","set_current_head","force_lease","clear_all_leases","trigger_onboard","new_auction","bid","cancel_auction","contribute","withdraw","refund","dissolve","edit","add_memo","poke","contribute_all","request_core_count","request_revenue_at","assign_core","control_auto_migration","continue_migrate","migrate_custom_top","migrate_custom_child","set_signed_max_limits","force_set_progress","send","teleport_assets","reserve_transfer_assets","execute","force_xcm_version","force_default_xcm_version","force_subscribe_version_notify","force_unsubscribe_version_notify","limited_reserve_transfer_assets","limited_teleport_assets","force_suspension","transfer_assets","claim_assets","transfer_assets_using_type_and_then","reap_page","execute_overweight","update","remove","report_double_voting","report_double_voting_unsigned","set_new_genesis","report_fork_voting","report_fork_voting_unsigned","report_future_block_voting","report_future_block_voting_unsigned","tx","ExtrinsicSuccess","ExtrinsicFailed","CodeUpdated","NewAccount","KilledAccount","Remarked","UpgradeAuthorized","Scheduled","Canceled","Dispatched","RetrySet","RetryCancelled","CallUnavailable","PeriodicFailed","RetryFailed","PermanentlyOverweight","Noted","Requested","Cleared","IndexAssigned","IndexFreed","IndexFrozen","Endowed","DustLost","Transfer","BalanceSet","Reserved","Unreserved","ReserveRepatriated","Deposit","Withdraw","Slashed","Minted","Burned","Suspended","Restored","Upgraded","Issued","Rescinded","Locked","Unlocked","Thawed","TotalIssuanceForced","TransactionFeePaid","EraPaid","Rewarded","SlashReported","OldSlashingReportDiscarded","StakersElected","Unbonded","Withdrawn","Kicked","StakingElectionFailed","Chilled","PayoutStarted","ValidatorPrefsSet","SnapshotVotersSizeExceeded","SnapshotTargetsSizeExceeded","ControllerBatchDeprecated","Offence","NewSession","NewAuthorities","Paused","Resumed","Spending","Awarded","Burnt","Rollover","SpendApproved","UpdatedInactive","AssetSpendApproved","AssetSpendVoided","Paid","PaymentFailed","SpendProcessed","Delegated","Undelegated","Voted","VoteRemoved","Submitted","DecisionDepositPlaced","DecisionDepositRefunded","DepositSlashed","DecisionStarted","ConfirmStarted","ConfirmAborted","Confirmed","Approved","Rejected","TimedOut","Cancelled","Killed","SubmissionDepositRefunded","MetadataSet","MetadataCleared","CallWhitelisted","WhitelistedCallRemoved","WhitelistedCallDispatched","Claimed","VestingUpdated","VestingCompleted","BatchInterrupted","BatchCompleted","BatchCompletedWithErrors","ItemCompleted","ItemFailed","DispatchedAs","ProxyExecuted","PureCreated","Announced","ProxyAdded","ProxyRemoved","NewMultisig","MultisigApproval","MultisigExecuted","MultisigCancelled","BountyProposed","BountyRejected","BountyBecameActive","BountyAwarded","BountyClaimed","BountyCanceled","BountyExtended","BountyApproved","CuratorProposed","CuratorUnassigned","CuratorAccepted","Added","SolutionStored","ElectionFinalized","ElectionFailed","PhaseTransitioned","Rebagged","ScoreUpdated","Created","PaidOut","Destroyed","StateChanged","MemberRemoved","RolesUpdated","PoolSlashed","UnbondingPoolSlashed","PoolCommissionUpdated","PoolMaxCommissionUpdated","PoolCommissionChangeRateUpdated","PoolCommissionClaimPermissionUpdated","PoolCommissionClaimed","MinBalanceDeficitAdjusted","MinBalanceExcessAdjusted","Unstaked","BatchChecked","BatchFinished","InternalError","Released","MigratedDelegation","CandidateBacked","CandidateIncluded","CandidateTimedOut","UpwardMessagesReceived","CurrentCodeUpdated","CurrentHeadUpdated","CodeUpgradeScheduled","NewHeadNoted","ActionQueued","PvfCheckStarted","PvfCheckAccepted","PvfCheckRejected","OpenChannelRequested","OpenChannelCanceled","OpenChannelAccepted","ChannelClosed","HrmpChannelForceOpened","HrmpSystemChannelOpened","OpenChannelDepositsUpdated","DisputeInitiated","DisputeConcluded","Revert","OnDemandOrderPlaced","SpotPriceSet","Registered","Deregistered","Swapped","NewLeasePeriod","Leased","AuctionStarted","AuctionClosed","ReserveConfiscated","BidAccepted","WinningOffset","Contributed","Withdrew","PartiallyRefunded","AllRefunded","Dissolved","HandleBidResult","Edited","MemoUpdated","AddedToNewRaise","RevenueInfoRequested","CoreAssigned","Migrated","AutoMigrationFinished","Halted","Attempted","Sent","UnexpectedResponse","ResponseReady","Notified","NotifyOverweight","NotifyDispatchError","NotifyDecodeFailed","InvalidResponder","InvalidResponderVersion","ResponseTaken","AssetsTrapped","VersionChangeNotified","SupportedVersionChanged","NotifyTargetSendFail","NotifyTargetMigrationFail","InvalidQuerierVersion","InvalidQuerier","VersionNotifyStarted","VersionNotifyRequested","VersionNotifyUnrequested","FeesPaid","AssetsClaimed","VersionMigrationFinished","ProcessingFailed","Processed","OverweightEnqueued","PageReaped","AssetRateCreated","AssetRateRemoved","AssetRateUpdated","events","BlockWeights","BlockLength","BlockHashCount","DbWeight","Version","SS58Prefix","MaximumWeight","MaxScheduledPerBlock","EpochDuration","ExpectedBlockTime","MaxAuthorities","MaxNominators","MinimumPeriod","ExistentialDeposit","MaxLocks","MaxReserves","MaxFreezes","OperationalFeeMultiplier","HistoryDepth","SessionsPerEra","BondingDuration","SlashDeferDuration","MaxExposurePageSize","MaxUnlockingChunks","MaxSetIdSessionEntries","SpendPeriod","Burn","PalletId","MaxApprovals","PayoutPeriod","MaxVotes","VoteLockingPeriod","SubmissionDeposit","MaxQueued","UndecidingTimeout","AlarmInterval","Tracks","Prefix","MinVestedTransfer","MaxVestingSchedules","batched_calls_limit","ProxyDepositBase","ProxyDepositFactor","MaxProxies","MaxPending","AnnouncementDepositBase","AnnouncementDepositFactor","DepositBase","DepositFactor","MaxSignatories","BountyDepositBase","BountyDepositPayoutDelay","BountyUpdatePeriod","CuratorDepositMultiplier","CuratorDepositMax","CuratorDepositMin","BountyValueMinimum","DataDepositPerByte","MaximumReasonLength","MaxActiveChildBountyCount","ChildBountyValueMinimum","BetterSignedThreshold","OffchainRepeat","MinerTxPriority","SignedMaxSubmissions","SignedMaxWeight","SignedMaxRefunds","SignedRewardBase","SignedDepositByte","SignedDepositWeight","MaxWinners","MinerMaxLength","MinerMaxWeight","MinerMaxVotesPerVoter","MinerMaxWinners","BagThresholds","MaxPointsToBalance","MaxUnbonding","UnsignedPriority","TrafficDefaultValue","MaxHistoricalRevenue","ParaDeposit","LeasePeriod","LeaseOffset","EndingPeriod","SampleLength","SlotRangeCount","LeasePeriodsPerSlot","MinContribution","RemoveKeysLimit","BrokerId","BrokerPotLocation","MaxKeyLen","HeapSize","MaxStale","ServiceWeight","IdleMaxServiceWeight","constants","experimental_inflation_prediction_info","Inflation","version","execute_block","initialize_block","Core","metadata","metadata_at_version","metadata_versions","apply_extrinsic","finalize_block","inherent_extrinsics","check_inherents","BlockBuilder","pending_rewards","points_to_balance","balance_to_points","pool_pending_slash","member_pending_slash","pool_needs_delegate_migration","member_needs_delegate_migration","member_total_balance","pool_balance","NominationPoolsApi","nominations_quota","eras_stakers_page_count","StakingApi","validate_transaction","TaggedTransactionQueue","offchain_worker","OffchainWorkerApi","validators","validator_groups","availability_cores","persisted_validation_data","assumed_validation_data","check_validation_outputs","session_index_for_child","validation_code","candidate_pending_availability","candidate_events","dmq_contents","inbound_hrmp_channels_contents","validation_code_by_hash","on_chain_votes","session_info","submit_pvf_check_statement","pvfs_require_precheck","validation_code_hash","disputes","session_executor_params","unapplied_slashes","key_ownership_proof","submit_report_dispute_lost","minimum_backing_votes","para_backing_state","async_backing_params","disabled_validators","node_features","approval_voting_params","claim_queue","candidates_pending_availability","ParachainHost","beefy_genesis","validator_set","submit_report_double_voting_unsigned_extrinsic","submit_report_fork_voting_unsigned_extrinsic","submit_report_future_block_voting_unsigned_extrinsic","generate_key_ownership_proof","generate_ancestry_proof","BeefyApi","mmr_root","mmr_leaf_count","generate_proof","verify_proof","verify_proof_stateless","MmrApi","authority_set_proof","next_authority_set_proof","BeefyMmrApi","grandpa_authorities","submit_report_equivocation_unsigned_extrinsic","current_set_id","GrandpaApi","configuration","current_epoch_start","current_epoch","next_epoch","BabeApi","authorities","AuthorityDiscoveryApi","generate_session_keys","decode_session_keys","SessionKeys","account_nonce","AccountNonceApi","query_info","query_fee_details","query_weight_to_fee","query_length_to_fee","TransactionPaymentApi","query_call_info","query_call_fee_details","TransactionPaymentCallApi","query_acceptable_payment_assets","query_xcm_weight","query_weight_to_asset_fee","query_delivery_fees","XcmPaymentApi","dry_run_call","dry_run_xcm","DryRunApi","convert_location","LocationToAccountApi","build_state","get_preset","preset_names","GenesisBuilder","apis","Parameters","ParaSudoWrapper","Sudo"]]`);
    replaceTokens = (obj) => Object.fromEntries(
      Object.entries(obj).map(([key, value]) => {
        const unwrappedValue = typeof value === "object" ? replaceTokens(value) : value;
        const numericKey = Number(key);
        if (Number.isNaN(numericKey)) {
          return [key, unwrappedValue];
        }
        return [tokens[numericKey], unwrappedValue];
      })
    );
    tokenizedCommonTrees = commonTrees.map(replaceTokens);
    unwrap = (obj, depth) => depth === 0 ? obj : Object.fromEntries(
      Object.entries(obj).map(([key, value]) => [
        key,
        unwrap(
          typeof value === "object" ? value : tokenizedCommonTrees[value],
          depth - 1
        )
      ])
    );
    getChainDescriptors = (key) => unwrap(replaceTokens(minified[key]), 2);
    Dot = getChainDescriptors("dot");
    Pas = getChainDescriptors("pas");
  }
});

// .papi/descriptors/src/metadataTypes.ts
var metadataTypes_exports = {};
__export(metadataTypes_exports, {
  default: () => metadataTypes_default
});
var content, metadataTypes_default;
var init_metadataTypes = __esm({
  ".papi/descriptors/src/metadataTypes.ts"() {
    "use strict";
    content = "";
    metadataTypes_default = content;
  }
});

// .papi/descriptors/src/dot_metadata.ts
var dot_metadata_exports = {};
__export(dot_metadata_exports, {
  default: () => dot_metadata_default
});
var binMeta, dot_metadata_default;
var init_dot_metadata = __esm({
  ".papi/descriptors/src/dot_metadata.ts"() {
    "use strict";
    binMeta = "";
    dot_metadata_default = binMeta;
  }
});

// .papi/descriptors/src/pas_metadata.ts
var pas_metadata_exports = {};
__export(pas_metadata_exports, {
  default: () => pas_metadata_default
});
var binMeta2, pas_metadata_default;
var init_pas_metadata = __esm({
  ".papi/descriptors/src/pas_metadata.ts"() {
    "use strict";
    binMeta2 = "";
    pas_metadata_default = binMeta2;
  }
});

// .papi/descriptors/src/index.ts
var index_exports = {};
__export(index_exports, {
  ArithmeticError: () => ArithmeticError,
  AssetRateEvent: () => AssetRateEvent,
  BabeAllowedSlots: () => BabeAllowedSlots,
  BabeDigestsNextConfigDescriptor: () => BabeDigestsNextConfigDescriptor,
  BabeDigestsPreDigest: () => BabeDigestsPreDigest,
  BagsListEvent: () => BagsListEvent,
  BagsListListListError: () => BagsListListListError,
  BalanceStatus: () => BalanceStatus,
  BalancesAdjustmentDirection: () => BalancesAdjustmentDirection,
  BalancesTypesReasons: () => BalancesTypesReasons,
  BountiesBountyStatus: () => BountiesBountyStatus,
  BountiesEvent: () => BountiesEvent,
  BrokerCoretimeInterfaceCoreAssignment: () => BrokerCoretimeInterfaceCoreAssignment,
  CandidateEvent: () => CandidateEvent,
  ChildBountiesEvent: () => ChildBountiesEvent,
  ChildBountyStatus: () => ChildBountyStatus,
  ClaimsStatementKind: () => ClaimsStatementKind,
  CommonAuctionsEvent: () => CommonAuctionsEvent,
  CommonClaimsEvent: () => CommonClaimsEvent,
  CommonCrowdloanLastContribution: () => CommonCrowdloanLastContribution,
  CommonParasRegistrarEvent: () => CommonParasRegistrarEvent,
  CommonSlotsEvent: () => CommonSlotsEvent,
  ConvictionVotingVoteAccountVote: () => ConvictionVotingVoteAccountVote,
  ConvictionVotingVoteVoting: () => ConvictionVotingVoteVoting,
  CoreState: () => CoreState,
  DigestItem: () => DigestItem,
  DispatchClass: () => DispatchClass,
  DispatchRawOrigin: () => DispatchRawOrigin,
  ElectionProviderMultiPhaseElectionCompute: () => ElectionProviderMultiPhaseElectionCompute,
  ElectionProviderMultiPhaseEvent: () => ElectionProviderMultiPhaseEvent,
  ElectionProviderMultiPhasePhase: () => ElectionProviderMultiPhasePhase,
  GovernanceOrigin: () => GovernanceOrigin,
  GrandpaEquivocation: () => GrandpaEquivocation,
  GrandpaEvent: () => GrandpaEvent,
  GrandpaStoredState: () => GrandpaStoredState,
  IndicesEvent: () => IndicesEvent,
  InvalidDisputeStatementKind: () => InvalidDisputeStatementKind,
  MmrPrimitivesError: () => MmrPrimitivesError,
  MultiAddress: () => MultiAddress,
  MultiSignature: () => MultiSignature,
  MultiSigner: () => MultiSigner,
  NominationPoolsBondExtra: () => NominationPoolsBondExtra,
  NominationPoolsClaimPermission: () => NominationPoolsClaimPermission,
  NominationPoolsCommissionClaimPermission: () => NominationPoolsCommissionClaimPermission,
  NominationPoolsConfigOp: () => NominationPoolsConfigOp,
  NominationPoolsPalletFreezeReason: () => NominationPoolsPalletFreezeReason,
  NominationPoolsPoolState: () => NominationPoolsPoolState,
  OccupiedCoreAssumption: () => OccupiedCoreAssumption,
  OffencesEvent: () => OffencesEvent,
  ParachainsDisputeLocation: () => ParachainsDisputeLocation,
  ParachainsDisputeResult: () => ParachainsDisputeResult,
  ParachainsDisputesEvent: () => ParachainsDisputesEvent,
  ParachainsHrmpEvent: () => ParachainsHrmpEvent,
  ParachainsInclusionAggregateMessageOrigin: () => ParachainsInclusionAggregateMessageOrigin,
  ParachainsInclusionEvent: () => ParachainsInclusionEvent,
  ParachainsInclusionUmpQueueId: () => ParachainsInclusionUmpQueueId,
  ParachainsOrigin: () => ParachainsOrigin,
  ParachainsParasEvent: () => ParachainsParasEvent,
  ParachainsParasParaLifecycle: () => ParachainsParasParaLifecycle,
  Phase: () => Phase,
  PolkadotPrimitivesV6DisputeStatement: () => PolkadotPrimitivesV6DisputeStatement,
  PolkadotPrimitivesV6ExecutorParamsExecutorParam: () => PolkadotPrimitivesV6ExecutorParamsExecutorParam,
  PolkadotPrimitivesV6PvfPrepKind: () => PolkadotPrimitivesV6PvfPrepKind,
  PolkadotPrimitivesV6ValidDisputeStatementKind: () => PolkadotPrimitivesV6ValidDisputeStatementKind,
  PolkadotRuntimeOriginCaller: () => PolkadotRuntimeOriginCaller,
  PolkadotRuntimeParachainsCoretimeEvent: () => PolkadotRuntimeParachainsCoretimeEvent,
  PolkadotRuntimeParachainsSchedulerCommonAssignment: () => PolkadotRuntimeParachainsSchedulerCommonAssignment,
  PolkadotRuntimeParachainsSchedulerPalletCoreOccupied: () => PolkadotRuntimeParachainsSchedulerPalletCoreOccupied,
  PreimageEvent: () => PreimageEvent,
  PreimageOldRequestStatus: () => PreimageOldRequestStatus,
  PreimagePalletHoldReason: () => PreimagePalletHoldReason,
  PreimageRequestStatus: () => PreimageRequestStatus,
  PreimagesBounded: () => PreimagesBounded,
  PvfExecKind: () => PvfExecKind,
  ReferendaTypesCurve: () => ReferendaTypesCurve,
  SessionEvent: () => SessionEvent,
  SlashingOffenceKind: () => SlashingOffenceKind,
  StakingEvent: () => StakingEvent,
  StakingForcing: () => StakingForcing,
  StakingPalletConfigOp: () => StakingPalletConfigOp,
  StakingPalletConfigOpBig: () => StakingPalletConfigOpBig,
  StakingRewardDestination: () => StakingRewardDestination,
  TokenError: () => TokenError,
  TraitsScheduleDispatchTime: () => TraitsScheduleDispatchTime,
  TransactionPaymentEvent: () => TransactionPaymentEvent,
  TransactionPaymentReleases: () => TransactionPaymentReleases,
  TransactionValidityError: () => TransactionValidityError,
  TransactionValidityInvalidTransaction: () => TransactionValidityInvalidTransaction,
  TransactionValidityTransactionSource: () => TransactionValidityTransactionSource,
  TransactionValidityUnknownTransaction: () => TransactionValidityUnknownTransaction,
  TransactionalError: () => TransactionalError,
  TreasuryPaymentState: () => TreasuryPaymentState,
  UpgradeGoAhead: () => UpgradeGoAhead,
  UpgradeRestriction: () => UpgradeRestriction,
  ValidityAttestation: () => ValidityAttestation,
  Version: () => Version,
  VersionedLocatableAsset: () => VersionedLocatableAsset,
  VestingEvent: () => VestingEvent,
  VotingConviction: () => VotingConviction,
  WestendRuntimeRuntimeFreezeReason: () => WestendRuntimeRuntimeFreezeReason,
  XcmPalletOrigin: () => XcmPalletOrigin,
  XcmPalletQueryStatus: () => XcmPalletQueryStatus,
  XcmPalletVersionMigrationStage: () => XcmPalletVersionMigrationStage,
  XcmV2BodyId: () => XcmV2BodyId,
  XcmV2Instruction: () => XcmV2Instruction,
  XcmV2Junction: () => XcmV2Junction,
  XcmV2JunctionBodyPart: () => XcmV2JunctionBodyPart,
  XcmV2MultiAssetFilter: () => XcmV2MultiAssetFilter,
  XcmV2MultiassetAssetId: () => XcmV2MultiassetAssetId,
  XcmV2MultiassetAssetInstance: () => XcmV2MultiassetAssetInstance,
  XcmV2MultiassetFungibility: () => XcmV2MultiassetFungibility,
  XcmV2MultiassetWildFungibility: () => XcmV2MultiassetWildFungibility,
  XcmV2MultiassetWildMultiAsset: () => XcmV2MultiassetWildMultiAsset,
  XcmV2MultilocationJunctions: () => XcmV2MultilocationJunctions,
  XcmV2NetworkId: () => XcmV2NetworkId,
  XcmV2OriginKind: () => XcmV2OriginKind,
  XcmV2Response: () => XcmV2Response,
  XcmV2TraitsError: () => XcmV2TraitsError,
  XcmV2WeightLimit: () => XcmV2WeightLimit,
  XcmV3Instruction: () => XcmV3Instruction,
  XcmV3Junction: () => XcmV3Junction,
  XcmV3JunctionBodyId: () => XcmV3JunctionBodyId,
  XcmV3JunctionNetworkId: () => XcmV3JunctionNetworkId,
  XcmV3Junctions: () => XcmV3Junctions,
  XcmV3MaybeErrorCode: () => XcmV3MaybeErrorCode,
  XcmV3MultiassetAssetId: () => XcmV3MultiassetAssetId,
  XcmV3MultiassetAssetInstance: () => XcmV3MultiassetAssetInstance,
  XcmV3MultiassetFungibility: () => XcmV3MultiassetFungibility,
  XcmV3MultiassetMultiAssetFilter: () => XcmV3MultiassetMultiAssetFilter,
  XcmV3MultiassetWildMultiAsset: () => XcmV3MultiassetWildMultiAsset,
  XcmV3Response: () => XcmV3Response,
  XcmV3TraitsError: () => XcmV3TraitsError,
  XcmV3WeightLimit: () => XcmV3WeightLimit,
  XcmV4AssetAssetFilter: () => XcmV4AssetAssetFilter,
  XcmV4AssetWildAsset: () => XcmV4AssetWildAsset,
  XcmV4Instruction: () => XcmV4Instruction,
  XcmV4Response: () => XcmV4Response,
  XcmV4TraitsOutcome: () => XcmV4TraitsOutcome,
  XcmVersionedAssetId: () => XcmVersionedAssetId,
  XcmVersionedAssets: () => XcmVersionedAssets,
  XcmVersionedLocation: () => XcmVersionedLocation,
  XcmVersionedResponse: () => XcmVersionedResponse,
  XcmVersionedXcm: () => XcmVersionedXcm,
  dot: () => dot_default,
  pas: () => pas_default
});
module.exports = __toCommonJS(index_exports);

// .papi/descriptors/src/dot.ts
var toBinary = (() => {
  const table = new Uint8Array(128);
  for (let i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    const n = base64.length, bytes = new Uint8Array((n - Number(base64[n - 1] === "=") - Number(base64[n - 2] === "=")) * 3 / 4 | 0);
    for (let i2 = 0, j = 0; i2 < n; ) {
      const c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      const c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes[j++] = c0 << 2 | c1 >> 4;
      bytes[j++] = c1 << 4 | c2 >> 2;
      bytes[j++] = c2 << 6 | c3;
    }
    return bytes;
  };
})();
var descriptorValues = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Dot"]);
var metadataTypes = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var asset = {};
var getMetadata = () => Promise.resolve().then(() => (init_dot_metadata(), dot_metadata_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var genesis = "0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3";
var _allDescriptors = { descriptors: descriptorValues, metadataTypes, asset, getMetadata, genesis };
var dot_default = _allDescriptors;

// .papi/descriptors/src/pas.ts
var toBinary2 = (() => {
  const table = new Uint8Array(128);
  for (let i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    const n = base64.length, bytes = new Uint8Array((n - Number(base64[n - 1] === "=") - Number(base64[n - 2] === "=")) * 3 / 4 | 0);
    for (let i2 = 0, j = 0; i2 < n; ) {
      const c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      const c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes[j++] = c0 << 2 | c1 >> 4;
      bytes[j++] = c1 << 4 | c2 >> 2;
      bytes[j++] = c2 << 6 | c3;
    }
    return bytes;
  };
})();
var descriptorValues2 = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Pas"]);
var metadataTypes2 = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary2("default" in module2 ? module2.default : module2)
);
var asset2 = {};
var getMetadata2 = () => Promise.resolve().then(() => (init_pas_metadata(), pas_metadata_exports)).then(
  (module2) => toBinary2("default" in module2 ? module2.default : module2)
);
var genesis2 = "0x77afd6190f1554ad45fd0d31aee62aacc33c6db0ea801129acb813f913e0764f";
var _allDescriptors2 = { descriptors: descriptorValues2, metadataTypes: metadataTypes2, asset: asset2, getMetadata: getMetadata2, genesis: genesis2 };
var pas_default = _allDescriptors2;

// .papi/descriptors/src/common-types.ts
var import_polkadot_api = require("polkadot-api");
var DigestItem = import_polkadot_api._Enum;
var Phase = import_polkadot_api._Enum;
var DispatchClass = import_polkadot_api._Enum;
var BagsListListListError = import_polkadot_api._Enum;
var TokenError = import_polkadot_api._Enum;
var ArithmeticError = import_polkadot_api._Enum;
var TransactionalError = import_polkadot_api._Enum;
var PreimageEvent = import_polkadot_api._Enum;
var IndicesEvent = import_polkadot_api._Enum;
var BalanceStatus = import_polkadot_api._Enum;
var TransactionPaymentEvent = import_polkadot_api._Enum;
var StakingEvent = import_polkadot_api._Enum;
var StakingRewardDestination = import_polkadot_api._Enum;
var StakingForcing = import_polkadot_api._Enum;
var OffencesEvent = import_polkadot_api._Enum;
var SessionEvent = import_polkadot_api._Enum;
var GrandpaEvent = import_polkadot_api._Enum;
var VersionedLocatableAsset = import_polkadot_api._Enum;
var XcmV3Junctions = import_polkadot_api._Enum;
var XcmV3Junction = import_polkadot_api._Enum;
var XcmV3JunctionNetworkId = import_polkadot_api._Enum;
var XcmV3JunctionBodyId = import_polkadot_api._Enum;
var XcmV2JunctionBodyPart = import_polkadot_api._Enum;
var XcmV3MultiassetAssetId = import_polkadot_api._Enum;
var XcmVersionedLocation = import_polkadot_api._Enum;
var XcmV2MultilocationJunctions = import_polkadot_api._Enum;
var XcmV2Junction = import_polkadot_api._Enum;
var XcmV2NetworkId = import_polkadot_api._Enum;
var XcmV2BodyId = import_polkadot_api._Enum;
var ConvictionVotingVoteAccountVote = import_polkadot_api._Enum;
var PreimagesBounded = import_polkadot_api._Enum;
var CommonClaimsEvent = import_polkadot_api._Enum;
var VestingEvent = import_polkadot_api._Enum;
var BountiesEvent = import_polkadot_api._Enum;
var ChildBountiesEvent = import_polkadot_api._Enum;
var ElectionProviderMultiPhaseEvent = import_polkadot_api._Enum;
var ElectionProviderMultiPhaseElectionCompute = import_polkadot_api._Enum;
var ElectionProviderMultiPhasePhase = import_polkadot_api._Enum;
var BagsListEvent = import_polkadot_api._Enum;
var NominationPoolsPoolState = import_polkadot_api._Enum;
var NominationPoolsCommissionClaimPermission = import_polkadot_api._Enum;
var ParachainsInclusionEvent = import_polkadot_api._Enum;
var ParachainsParasEvent = import_polkadot_api._Enum;
var ParachainsHrmpEvent = import_polkadot_api._Enum;
var ParachainsDisputesEvent = import_polkadot_api._Enum;
var ParachainsDisputeLocation = import_polkadot_api._Enum;
var ParachainsDisputeResult = import_polkadot_api._Enum;
var CommonParasRegistrarEvent = import_polkadot_api._Enum;
var CommonSlotsEvent = import_polkadot_api._Enum;
var CommonAuctionsEvent = import_polkadot_api._Enum;
var PolkadotRuntimeParachainsCoretimeEvent = import_polkadot_api._Enum;
var XcmV4TraitsOutcome = import_polkadot_api._Enum;
var XcmV3TraitsError = import_polkadot_api._Enum;
var XcmV4Instruction = import_polkadot_api._Enum;
var XcmV3MultiassetFungibility = import_polkadot_api._Enum;
var XcmV3MultiassetAssetInstance = import_polkadot_api._Enum;
var XcmV4Response = import_polkadot_api._Enum;
var XcmV3MaybeErrorCode = import_polkadot_api._Enum;
var XcmV2OriginKind = import_polkadot_api._Enum;
var XcmV4AssetAssetFilter = import_polkadot_api._Enum;
var XcmV4AssetWildAsset = import_polkadot_api._Enum;
var XcmV2MultiassetWildFungibility = import_polkadot_api._Enum;
var XcmV3WeightLimit = import_polkadot_api._Enum;
var XcmVersionedAssets = import_polkadot_api._Enum;
var XcmV2MultiassetAssetId = import_polkadot_api._Enum;
var XcmV2MultiassetFungibility = import_polkadot_api._Enum;
var XcmV2MultiassetAssetInstance = import_polkadot_api._Enum;
var ParachainsInclusionAggregateMessageOrigin = import_polkadot_api._Enum;
var ParachainsInclusionUmpQueueId = import_polkadot_api._Enum;
var AssetRateEvent = import_polkadot_api._Enum;
var PolkadotRuntimeOriginCaller = import_polkadot_api._Enum;
var DispatchRawOrigin = import_polkadot_api._Enum;
var GovernanceOrigin = import_polkadot_api._Enum;
var ParachainsOrigin = import_polkadot_api._Enum;
var XcmPalletOrigin = import_polkadot_api._Enum;
var PreimageOldRequestStatus = import_polkadot_api._Enum;
var PreimageRequestStatus = import_polkadot_api._Enum;
var BabeDigestsNextConfigDescriptor = import_polkadot_api._Enum;
var BabeAllowedSlots = import_polkadot_api._Enum;
var BabeDigestsPreDigest = import_polkadot_api._Enum;
var BalancesTypesReasons = import_polkadot_api._Enum;
var PreimagePalletHoldReason = import_polkadot_api._Enum;
var WestendRuntimeRuntimeFreezeReason = import_polkadot_api._Enum;
var NominationPoolsPalletFreezeReason = import_polkadot_api._Enum;
var TransactionPaymentReleases = import_polkadot_api._Enum;
var GrandpaStoredState = import_polkadot_api._Enum;
var TreasuryPaymentState = import_polkadot_api._Enum;
var ConvictionVotingVoteVoting = import_polkadot_api._Enum;
var VotingConviction = import_polkadot_api._Enum;
var TraitsScheduleDispatchTime = import_polkadot_api._Enum;
var ClaimsStatementKind = import_polkadot_api._Enum;
var Version = import_polkadot_api._Enum;
var BountiesBountyStatus = import_polkadot_api._Enum;
var ChildBountyStatus = import_polkadot_api._Enum;
var NominationPoolsClaimPermission = import_polkadot_api._Enum;
var PolkadotPrimitivesV6ExecutorParamsExecutorParam = import_polkadot_api._Enum;
var PolkadotPrimitivesV6PvfPrepKind = import_polkadot_api._Enum;
var PvfExecKind = import_polkadot_api._Enum;
var ValidityAttestation = import_polkadot_api._Enum;
var PolkadotPrimitivesV6DisputeStatement = import_polkadot_api._Enum;
var PolkadotPrimitivesV6ValidDisputeStatementKind = import_polkadot_api._Enum;
var InvalidDisputeStatementKind = import_polkadot_api._Enum;
var PolkadotRuntimeParachainsSchedulerPalletCoreOccupied = import_polkadot_api._Enum;
var PolkadotRuntimeParachainsSchedulerCommonAssignment = import_polkadot_api._Enum;
var ParachainsParasParaLifecycle = import_polkadot_api._Enum;
var UpgradeGoAhead = import_polkadot_api._Enum;
var UpgradeRestriction = import_polkadot_api._Enum;
var SlashingOffenceKind = import_polkadot_api._Enum;
var BrokerCoretimeInterfaceCoreAssignment = import_polkadot_api._Enum;
var MultiSigner = import_polkadot_api._Enum;
var CommonCrowdloanLastContribution = import_polkadot_api._Enum;
var XcmPalletQueryStatus = import_polkadot_api._Enum;
var XcmVersionedResponse = import_polkadot_api._Enum;
var XcmV2Response = import_polkadot_api._Enum;
var XcmV2TraitsError = import_polkadot_api._Enum;
var XcmV3Response = import_polkadot_api._Enum;
var XcmPalletVersionMigrationStage = import_polkadot_api._Enum;
var XcmVersionedAssetId = import_polkadot_api._Enum;
var ReferendaTypesCurve = import_polkadot_api._Enum;
var MultiAddress = import_polkadot_api._Enum;
var BalancesAdjustmentDirection = import_polkadot_api._Enum;
var StakingPalletConfigOpBig = import_polkadot_api._Enum;
var StakingPalletConfigOp = import_polkadot_api._Enum;
var GrandpaEquivocation = import_polkadot_api._Enum;
var NominationPoolsBondExtra = import_polkadot_api._Enum;
var NominationPoolsConfigOp = import_polkadot_api._Enum;
var MultiSignature = import_polkadot_api._Enum;
var XcmVersionedXcm = import_polkadot_api._Enum;
var XcmV2Instruction = import_polkadot_api._Enum;
var XcmV2MultiAssetFilter = import_polkadot_api._Enum;
var XcmV2MultiassetWildMultiAsset = import_polkadot_api._Enum;
var XcmV2WeightLimit = import_polkadot_api._Enum;
var XcmV3Instruction = import_polkadot_api._Enum;
var XcmV3MultiassetMultiAssetFilter = import_polkadot_api._Enum;
var XcmV3MultiassetWildMultiAsset = import_polkadot_api._Enum;
var TransactionValidityError = import_polkadot_api._Enum;
var TransactionValidityInvalidTransaction = import_polkadot_api._Enum;
var TransactionValidityUnknownTransaction = import_polkadot_api._Enum;
var TransactionValidityTransactionSource = import_polkadot_api._Enum;
var CoreState = import_polkadot_api._Enum;
var OccupiedCoreAssumption = import_polkadot_api._Enum;
var CandidateEvent = import_polkadot_api._Enum;
var MmrPrimitivesError = import_polkadot_api._Enum;
